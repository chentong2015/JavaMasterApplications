https://poi.apache.org/components/spreadsheet/quick-guide.html

poi-VERSION.jar                ==> basic 2003 Excel format
poi-ooxml-VERSION.jar          ==> For 2007 Excel format
poi-ooxml-schemas-VERSION.jar
xmlbeans-VERSION.jar
commons-collections.jar        ==> ListValuedMap
commons-compress.jar           ==> Zip/ZipFile
commons-math.jar               ==> for POIFSFileSystem

TODO. POI读取的三种模式
1. SXSSF      只写: 内存中保留一定行数数据，超过行数，将索引最低的数据刷入硬盘
2. eventmodel 只读: cup和内存消耗低
3. usermodel  可读可写: cpu和内存消耗大


1. SXSSF API ==> 构建在XSSF之上, 兼容于api的XSSF的流扩展, 适用于处理生成大的电子表格
2. 设置在内存中暂存的数据row行数，超过指定的行数之后，自动的刷到硬盘中
3. 可以在数据量过大时，减少存储在内存当中的数据 !!
private void testSXSSF() {
   SXSSFWorkbook workbook = new SXSSFWorkbook(100);
   Sheet sheet = workbook.createSheet("name");
   Row row = sheet.createRow(1);
   Cell cell1 = row.createCell(1);
   cell1.setCellValue("value");

   try (FileOutputStream outputStream = new FileOutputStream("sxssf.xlsx")) {
       workbook.write(outputStream);
   } catch (IOException exception) {
       exception.printStackTrace();
   }
   workbook.dispose();
}


XSSF and SAX (Event API) ==> 构建一个org.apache.poi.xssf.eventmodel.xssfreader的实例
1. excel2003是以二进制的方式存储, 65536行 + 256列
2. excel2007采用了基于XML的ooxml开放文档标准，ooxml使用XML和ZIP技术结合进行文件存储, 1048576行 + 16384列
3. excel2007之后通过操作原始xml数据的方法获得数据
private void testXSSF(String filename) throws Exception {
   try (OPCPackage pkg = OPCPackage.open(filename, PackageAccess.READ)) {
       XSSFReader r = new XSSFReader(pkg);
       SharedStringsTable sst = r.getSharedStringsTable();
       XMLReader parser = fetchSheetParser(sst);
       try(InputStream sheet = r.getSheetsData().next()){
           InputSource sheetSource = new InputSource(sheet);
           parser.parse(sheetSource);
       }
   }
}